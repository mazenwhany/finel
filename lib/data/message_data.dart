class Message {
  final String id;
  final String senderId;
  final String receiverId;
  final String messageText;
  final bool read;
  final DateTime createdAt;
  final DateTime updatedAt;

  Message({
    required this.id,
    required this.senderId,
    required this.receiverId,
    required this.messageText,
    required this.read,
    required this.createdAt,
    required this.updatedAt,
  });

  // Factory constructor for creating a new message when sending
  factory Message.create({
    required String senderId,
    required String receiverId,
    required String messageText,
  }) {
    return Message(
      id: '', // Will be generated by the database
      senderId: senderId,
      receiverId: receiverId,
      messageText: messageText,
      read: false,
      createdAt: DateTime.now(), // Will be overwritten by database
      updatedAt: DateTime.now(), // Will be overwritten by database
    );
  }

  // Factory constructor for parsing from JSON
  factory Message.fromJson(Map<String, dynamic> json) {
    return Message(
      id: json['id'] as String,
      senderId: json['sender_id'] as String,
      receiverId: json['receiver_id'] as String,
      messageText: json['message_text'] as String,
      read: json['read'] as bool,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
    );
  }

  // Convert to JSON for Supabase operations
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'sender_id': senderId,
      'receiver_id': receiverId,
      'message_text': messageText,
      'read': read,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  // Convert to JSON for insert operations (excluding generated fields)
  Map<String, dynamic> toInsertJson() {
    return {
      'sender_id': senderId,
      'receiver_id': receiverId,
      'message_text': messageText,
    };
  }

  // Create a copy of the message with updated fields
  Message copyWith({
    String? messageText,
    bool? read,
  }) {
    return Message(
      id: id,
      senderId: senderId,
      receiverId: receiverId,
      messageText: messageText ?? this.messageText,
      read: read ?? this.read,
      createdAt: createdAt,
      updatedAt: DateTime.now(),
    );
  }
}